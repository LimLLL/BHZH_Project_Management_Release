name: "Test Build and Upload Artifacts"

on:
  workflow_dispatch:
  push:
    branches:
      - test

jobs:
  build-and-upload:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            args: '--target aarch64-apple-darwin'
          - platform: macos-latest
            args: '--target x86_64-apple-darwin'
          - platform: windows-latest
            args: '-c src-tauri/tauri.windows.conf.json'
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install unzip utility (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Install unzip utility (MacOS)
        if: runner.os == 'macOS'
        run: brew install unzip

      - name: Unzip code
        run: unzip -o -P ${{ secrets.ZIP_PASSWORD }} compressed_code.zip

      - name: Modify Cargo.toml (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          sed -i '' 's|tauri = { version = "2", features = \["devtools", "test"\] }|tauri = { version = "2", features = \[\] }|g' src-tauri/Cargo.toml
          echo "Modified Cargo.toml:"
          cat src-tauri/Cargo.toml

      - name: Modify Cargo.toml (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          (Get-Content src-tauri/Cargo.toml) -replace 'tauri = { version = "2", features = \["devtools", "test"\] }', 'tauri = { version = "2", features = [] }' | Set-Content src-tauri/Cargo.toml
          Write-Output "Modified Cargo.toml:"
          Get-Content src-tauri/Cargo.toml

      - name: Modify Cargo.toml (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sed -i 's|tauri = { version = "2", features = \["devtools", "test"\] }|tauri = { version = "2", features = \[\] }|g' src-tauri/Cargo.toml
          echo "Modified Cargo.toml:"
          cat src-tauri/Cargo.toml

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.args }}

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build Tauri App
        env:
          NODE_ENV: test
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: pnpm tauri build ${{ matrix.args }}

      - name: Collect bundles
        run: |
          echo "Bundles in src-tauri/target:"
          find src-tauri/target -type f | sed 's/^/  /'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}-${{ github.run_id }}
          path: |
            src-tauri/target/**/bundle/**/*
          retention-days: 1   # <-- 这里设置为 1 天后过期

  cleanup:
    needs: build-and-upload
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Delete compressed_code.zip
        run: |
          rm -f compressed_code.zip
          echo "Deleted compressed_code.zip"
      - name: Commit deletion
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add compressed_code.zip
          git commit -m "Delete compressed_code.zip [skip ci]"
          git push
